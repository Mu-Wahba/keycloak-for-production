{"version":3,"sources":["../../src/app/keycloak-service/keycloak.service.ts"],"names":["KeycloakService","constructor","keycloak","keycloakAuth","authenticated","login","options","logout","redirectUri","baseUrl","account","accountManagement","authServerUrl","charAt","length","realm","getToken","Promise","resolve","reject","token","updateToken","success","error"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAqBA,OAAO,MAAMA,eAAN,CAAsB;AAGlBC,EAAAA,WAAP,CAAmBC,QAAnB,EAA6C;AAAA;;AACzC,SAAKC,YAAL,GAAoBD,QAApB;AACH;;AAEME,EAAAA,aAAP,GAAgC;AAC5B,WAAO,KAAKD,YAAL,CAAkBC,aAAlB,GAAkC,KAAKD,YAAL,CAAkBC,aAApD,GAAoE,KAA3E;AACH;;AAEMC,EAAAA,KAAP,CAAaC,OAAb,EAAmD;AAC/C,SAAKH,YAAL,CAAkBE,KAAlB,CAAwBC,OAAxB;AACH;;AAEMC,EAAAA,MAAP,CAAcC,WAAmB,GAAGC,OAApC,EAAmD;AAC/C,SAAKN,YAAL,CAAkBI,MAAlB,CAAyB;AAACC,MAAAA,WAAW,EAAEA;AAAd,KAAzB;AACH;;AAEME,EAAAA,OAAP,GAAuB;AACnB,SAAKP,YAAL,CAAkBQ,iBAAlB;AACH;;AAEMC,EAAAA,aAAP,GAA2C;AACvC,UAAMA,aAAa,GAAG,KAAKT,YAAL,CAAkBS,aAAxC;AACA,WAAOA,aAAa,CAAEC,MAAf,CAAsBD,aAAa,CAAEE,MAAf,GAAwB,CAA9C,MAAqD,GAArD,GAA2DF,aAA3D,GAA2EA,aAAa,GAAG,GAAlG;AACH;;AAEMG,EAAAA,KAAP,GAAmC;AAC/B,WAAO,KAAKZ,YAAL,CAAkBY,KAAzB;AACH;;AAEMC,EAAAA,QAAP,GAAmC;AAC/B,WAAO,IAAIC,OAAJ,CAAoB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5C,UAAI,KAAKhB,YAAL,CAAkBiB,KAAtB,EAA6B;AACzB,aAAKjB,YAAL,CACKkB,WADL,CACiB,CADjB,EAEKC,OAFL,CAEa,MAAM;AACXJ,UAAAA,OAAO,CAAC,KAAKf,YAAL,CAAkBiB,KAAnB,CAAP;AACH,SAJL,EAKKG,KALL,CAKW,MAAM;AACTJ,UAAAA,MAAM,CAAC,yBAAD,CAAN;AACH,SAPL;AAQH,OATD,MASO;AACHA,QAAAA,MAAM,CAAC,eAAD,CAAN;AACH;AACJ,KAbM,CAAP;AAcH;;AA/CwB","sourcesContent":["/*\n * Copyright 2017 Red Hat, Inc. and/or its affiliates\n * and other contributors as indicated by the @author tags.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {KeycloakLoginOptions} from \"../../../../../../../../../../adapters/oidc/js/src/main/resources/keycloak\";\n\ndeclare const baseUrl: string;\nexport type KeycloakClient = Keycloak.KeycloakInstance;\n\nexport class KeycloakService {\n    private keycloakAuth: KeycloakClient;\n\n    public constructor(keycloak: KeycloakClient) {\n        this.keycloakAuth = keycloak;\n    }\n\n    public authenticated(): boolean {\n        return this.keycloakAuth.authenticated ? this.keycloakAuth.authenticated : false;\n    }\n\n    public login(options?: KeycloakLoginOptions): void {\n        this.keycloakAuth.login(options);\n    }\n\n    public logout(redirectUri: string = baseUrl): void {\n        this.keycloakAuth.logout({redirectUri: redirectUri});\n    }\n\n    public account(): void {\n        this.keycloakAuth.accountManagement();\n    }\n\n    public authServerUrl(): string | undefined {\n        const authServerUrl = this.keycloakAuth.authServerUrl;\n        return authServerUrl!.charAt(authServerUrl!.length - 1) === '/' ? authServerUrl : authServerUrl + '/';\n    }\n\n    public realm(): string | undefined {\n        return this.keycloakAuth.realm;\n    }\n\n    public getToken(): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            if (this.keycloakAuth.token) {\n                this.keycloakAuth\n                    .updateToken(5)\n                    .success(() => {\n                        resolve(this.keycloakAuth.token as string);\n                    })\n                    .error(() => {\n                        reject('Failed to refresh token');\n                    });\n            } else {\n                reject('Not logged in');\n            }\n        });\n    }\n}\n"],"file":"keycloak.service.js"}